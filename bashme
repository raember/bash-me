#!/bin/bash -
#==============================================================================
#title          :bashme.sh
#description    :A bash template which manages vital mechanisms for bash
#                scripting.
#author         :Raphael Emberger
#date           :20180612
#VERSION        :0.1    
#EXPLANATION          :./bashme.sh
#notes          :
#bash_version   :4.4.12(1)-release
#==============================================================================
# Useful links:
# Bash:
# https://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes
# https://developer.apple.com/library/archive/documentation/OpenSource/Conceptual/ShellScripting/Introduction/Introduction.html
# https://bash.cyberciti.biz/bash-reference-manual/index.html
# 
# Style guide:
# https://google.github.io/styleguide/shell.xml
# https://www.chromium.org/chromium-os/shell-style-guidelines
# 
# Others:
# https://www.gnu.org/manual/manual.html
# http://faculty.salina.k-state.edu/tim/unix_sg/index.html
# https://en.wikipedia.org/wiki/ANSI_escape_code
# https://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html



###############################################################################
#                                  LOGGING                                    #
###############################################################################
# Constants
declare -ri LL_TRACE=0
declare -ri LL_DEBUG=1
declare -ri LL_INFO=2
declare -ri LL_WARN=3
declare -ri LL_ERROR=4
declare -ri LL_FATAL=5
declare -ri LL_QUIET=6

# Variables
declare -i loglevel=$LL_INFO
declare -i logfilelevel=$LL_TRACE
declare logfile="./$(/bin/basename "$0").log"
declare log2file=
declare log2std=1

##
# Logs a message according to its log level.
# Globals:
#   BASH_LINENO
#   FUNCNAME
#   BASH_SOURCE
#   LL_ERROR
#   RESET
#   log2std
#   log2file
#   logfile
# Arguments:
#   Color
#   Log level
#   Literal log level
#   Log message
# Returns:
#   None
#
function log() {
  local lineno="${BASH_LINENO[2]}"
  local file="${BASH_SOURCE[3]}"
  local func=" ${FUNCNAME[2]}()"
  if [[ -z "$file" ]]; then
    lineno="${BASH_LINENO[1]}"
    file="${BASH_SOURCE[2]}"
  fi
  local logmsg="$4"
  if [[ -n "$log2std" ]] && (( $loglevel <= $2 )); then
    if (( $2 >= $LL_ERROR )); then
      builtin echo -e "$1$logmsg$RESET" >&2
    else
      builtin echo -e "$1$logmsg$RESET"
    fi
  fi
  [[ -n "$log2file" ]] && (( $logfilelevel <= $2 )) && builtin echo "$(date '+%Y-%m-%d %H:%M:%S') $3($file:$lineno)$func: $logmsg" >> $logfile
  return $EX_OK
}

##
# Logs a message on the trace level.
# Globals:
#   LL_TRACE
#   FG_LGRAY
#   DIM
#   loglevel
# Arguments:
#   Log message
# Returns:
#   None
#
function trace() {
  [[ $loglevel -gt $LL_TRACE ]] && [[ -z "$log2file" ]] && return $EX_OK
  log "$FG_LGRAY$DIM" $LL_TRACE '[TRACE]' "$1"
  return $EX_OK
}

##
# Logs a message on the debug level.
# Globals:
#   LL_DEBUG
#   FG_LGRAY
#   loglevel
# Arguments:
#   Log message
# Returns:
#   None
#
function debug() {
  [[ $loglevel -gt $LL_DEBUG ]] && [[ -z "$log2file" ]] && return $EX_OK
  log "$FG_LGRAY" $LL_DEBUG '[DEBUG]' "$1"
  return $EX_OK
}

##
# Logs a message on the info level.
# Globals:
#   LL_INFO
#   FG_WHITE
#   loglevel
# Arguments:
#   Log message
# Returns:
#   None
#
function info() {
  [[ $loglevel -gt $LL_INFO ]] && [[ -z "$log2file" ]] && return $EX_OK
  log "$FG_WHITE" $LL_INFO '[INFO] ' "$1"
  return $EX_OK
}

##
# Logs a message on the warn level.
# Globals:
#   LL_WARN
#   FG_YELLOW
#   loglevel
# Arguments:
#   Log message
# Returns:
#   None
#
function warn() {
  [[ $loglevel -gt $LL_WARN ]] && [[ -z "$log2file" ]] && return $EX_OK
  log "$FG_YELLOW" $LL_WARN '[WARN] ' "$1"
  return $EX_OK
}

##
# Logs a message on the error level.
# Globals:
#   LL_ERROR
#   FG_RED
#   loglevel
# Arguments:
#   Log message
# Returns:
#   None
#
function error() {
  [[ $loglevel -gt $LL_ERROR ]] && [[ -z "$log2file" ]] && return $EX_OK
  log "$FG_RED" $LL_ERROR '[ERROR]' "$1"
  return $EX_OK
}

##
# Logs a message on the fatal level.
# Globals:
#   LL_FATAL
#   FG_RED
#   loglevel
# Arguments:
#   Log message
# Returns:
#   None
#
function fatal() {
  [[ $loglevel -gt $LL_FATAL ]] && [[ -z "$log2file" ]] && return $EX_OK
  log "$FG_LRED$BOLD" $LL_FATAL '[FATAL]' "$1"
  return $EX_OK
}

##
# A makeshift function to cover logging the access to not yet implemented.
# functionality.
# Globals:
#   LL_ERROR
#   FG_LYELLOW
#   BOLD
#   loglevel
# Arguments:
#   None
# Returns:
#   None
#
function NYI() {
  function log_nyi() {
    [[ $loglevel -gt $LL_INFO ]] && [[ -z "$log2file" ]] && return $EX_OK
    log "$FG_LYELLOW$BOLD" $LL_ERROR '[ERROR]' "$1"
    return $EX_OK
  }
  log_nyi 'Not yet implemented!'
  return $EX_OK
}

##
# Marks a position in the code as a TODO.
# Globals:
#   LL_DEBUG
#   FG_GREEN
#   BOLD
#   loglevel
# Arguments:
#   The description of the work to be done.
# Returns:
#   None
#
function TODO() {
  function log_todo() {
    [[ $loglevel -gt $LL_DEBUG ]] && [[ -z "$log2file" ]] && return $EX_OK
    log "$FG_GREEN$BOLD" $LL_DEBUG '[TODO] ' "$1"
    return $EX_OK
  }
  log_todo "$1"
  return $EX_OK
}



###############################################################################
#                                RETURN VALUE                                 #
###############################################################################
# Constants
declare -ri EX_OK=0
declare -ri EX_ERR=1
declare -ri EX_MISSUSE=2
declare -ri EX_CANNOTEXEC=126
declare -ri EX_CMDNOTFOUND=127
declare -ri EX_INVALARG=128
declare -ri EX_FATAL_BASE=128
declare -ri EX_INT=130
declare -ri EX_OUTOFRANGE=255

##
# Checks the last return value and writes logs.
# Globals:
#   None
# Arguments:
#   Last return value ($?)
# Returns:
#   Last return value ($?)
#
function check_retval() {
  local retval="$1"
  trace "Checking return value: '$retval'"
  if [[ $retval -gt 64 ]] && [[ $retval -lt 114 ]]; then
    debug "Custom C/C++ return code according to /usr/include/sysexits.h detected."
  elif [[ $retval -gt 128 ]] && [[ $retval -lt 166 ]]; then
    debug "Custom fatal return value detected."
  else
    case $retval in
      $EX_OK)
        debug "Code exited normally."
        ;;
      $EX_ERR)
        debug "Catchall for general errors. Miscellaneous errors, such as 'divide by zero' and other impermissible operations."
        ;;
      $EX_MISSUSE)
        debug "Misuse of shell builtins. Missing keyword or command or permission problem."
        ;;
      $EX_CANNOTEXEC)
        debug "Command invoked cannot execute. Permission problem or command is not an executable."
        ;;
      $EX_CMDNOTFOUND)
        debug "Command not found. Possible problem with \$PATH or a typo."
        ;;
      $EX_INVALARG)
        debug "Invalid argument to exit. exit takes only integer args in the range 0 - 255."
        ;;
      $EX_INT)
        debug "Command terminated by Control-C."
        ;;
      $EX_OUTOFRANGE)
        debug "Exit status out of range. exit takes only integer args in the range 0 - 255."
        ;;
      ?)
        warn "Could not categorize return value appropriately."
    esac
  fi
  return $retval
}




###############################################################################
#                            COLORS AND FORMATTING                            #
###############################################################################
# Constants
readonly FG_BLACK="$(tput setaf 0)"
readonly FG_RED="$(tput setaf 1)"
readonly FG_GREEN="$(tput setaf 2)"
readonly FG_YELLOW="$(tput setaf 3)"
readonly FG_BLUE="$(tput setaf 4)"
readonly FG_MAGENTA="$(tput setaf 5)"
readonly FG_CYAN="$(tput setaf 6)"
readonly FG_LGRAY="$(tput setaf 7)"
readonly FG_GRAY="$(tput setaf 8)"
readonly FG_LRED="$(tput setaf 9)"
readonly FG_LGREEN="$(tput setaf 10)"
readonly FG_LYELLOW="$(tput setaf 11)"
readonly FG_LBLUE="$(tput setaf 12)"
readonly FG_LMAGENTA="$(tput setaf 13)"
readonly FG_LCYAN="$(tput setaf 14)"
readonly FG_WHITE="$(tput setaf 15)"

readonly BG_BLACK="$(tput setab 0)"
readonly BG_RED="$(tput setab 1)"
readonly BG_GREEN="$(tput setab 2)"
readonly BG_YELLOW="$(tput setab 3)"
readonly BG_BLUE="$(tput setab 4)"
readonly BG_MAGENTA="$(tput setab 5)"
readonly BG_CYAN="$(tput setab 6)"
readonly BG_LGRAY="$(tput setab 7)"
readonly BG_GRAY="$(tput setab 8)"
readonly BG_LRED="$(tput setab 9)"
readonly BG_LGREEN="$(tput setab 10)"
readonly BG_LYELLOW="$(tput setab 11)"
readonly BG_LBLUE="$(tput setab 12)"
readonly BG_LMAGENTA="$(tput setab 13)"
readonly BG_LCYAN="$(tput setab 14)"
readonly BG_WHITE="$(tput setab 15)"

readonly BOLD="$(tput bold)"
readonly DIM="$(tput dim)"
readonly ITALIC="$(tput sitm)"
readonly STANDOUT="$(tput smso)"
readonly STANDOUT_STOP="$(tput rmso)"
readonly UNDERLINE="$(tput smul)"
readonly UNDERLINE_STOP="$(tput rmul)"
readonly BLINK="$(tput blink)"
readonly REVERSE="$(tput rev)"
readonly INVISIBLE="$(tput invis)"
readonly STRIKEOUT="$(tput os)"

readonly RESET="$(tput sgr0)"

##
# Prints a table of all the available formats.
# Globals:
#   BOLD
#   DIM
#   ITALIC
#   UNDERLINE
#   BLINK
#   REVERSE
#   INVISIBLE
#   STRIKEOUT
#   UNDERLINE_STOP
#   RESET
# Arguments:
#   None
# Returns:
#   None
#
function formatting_test() {
  trace 'Printing formatting table.'
  builtin echo -e "Formattings:"
  builtin echo -e "BOLD:      ${BOLD}BOLD${RESET}."
  builtin echo -e "DIM:       ${DIM}DIM${RESET}."
  builtin echo -e "ITALIC:    ${ITALIC}ITALIC${RESET}."
  builtin echo -e "UNDERLINE: ${UNDERLINE}UNDERLINE${UNDERLINE_STOP}."
  builtin echo -e "STANDOUT:  ${STANDOUT}STANDOUT${STANDOUT_STOP}."
  builtin echo -e "BLINK:     ${BLINK}BLINK${RESET}."
  builtin echo -e "REVERSE:   ${REVERSE}REVERSE${RESET}."
  builtin echo -e "INVISIBLE: ${INVISIBLE}INVISIBLE${RESET}."
  builtin echo -e "STRIKEOUT: ${STRIKEOUT}STRIKEOUT${RESET}."
  return $EX_OK
}

##
# Prints a table of all the available colors.
# Globals:
#   FG_BLACK
#   FG_RED
#   FG_GREEN
#   FG_YELLOW
#   FG_BLUE
#   FG_MAGENTA
#   FG_CYAN
#   FG_LGRAY
#   FG_GRAY
#   FG_LRED
#   FG_LGREEN
#   FG_LYELLOW
#   FG_LBLUE
#   FG_LMAGENTA
#   FG_LCYAN
#   FG_WHITE
#   BG_BLACK
#   BG_RED
#   BG_GREEN
#   BG_YELLOW
#   BG_BLUE
#   BG_MAGENTA
#   BG_CYAN
#   BG_LGRAY
#   BG_GRAY
#   BG_LRED
#   BG_LGREEN
#   BG_LYELLOW
#   BG_LBLUE
#   BG_LMAGENTA
#   BG_LCYAN
#   BG_WHITE
#   RESET
# Arguments:
#   None
# Returns:
#   None
#
function color_test() {
  trace 'Printing color table.'
  builtin echo -e "Foreground:"
  builtin echo -en "FG_BLACK:      ${FG_BLACK}FG_BLACK${RESET}      "
  builtin echo -e  "FG_GRAY:     ${FG_GRAY}FG_GRAY${RESET}"
  builtin echo -en "FG_RED:        ${FG_RED}FG_RED${RESET}        "
  builtin echo -e  "FG_LRED:     ${FG_LRED}FG_LRED${RESET}"
  builtin echo -en "FG_GREEN:      ${FG_GREEN}FG_GREEN${RESET}      "
  builtin echo -e  "FG_LGREEN:   ${FG_LGREEN}FG_LGREEN${RESET}"
  builtin echo -en "FG_YELLOW:     ${FG_YELLOW}FG_YELLOW${RESET}     "
  builtin echo -e  "FG_LYELLOW : ${FG_LYELLOW}FG_LYELLOW${RESET}"
  builtin echo -en "FG_BLUE:       ${FG_BLUE}FG_BLUE${RESET}       "
  builtin echo -e  "FG_LBLUE:    ${FG_LBLUE}FG_LBLUE${RESET}"
  builtin echo -en "FG_MAGENTA:    ${FG_MAGENTA}FG_MAGENTA${RESET}    "
  builtin echo -e  "FG_LMAGENTA: ${FG_LMAGENTA}FG_LMAGENTA${RESET}"
  builtin echo -en "FG_CYAN:       ${FG_CYAN}FG_CYAN${RESET}       "
  builtin echo -e  "FG_LCYAN:    ${FG_LCYAN}FG_LCYAN${RESET}"
  builtin echo -en "FG_LGRAY: ${FG_LGRAY}FG_LGRAY${RESET} "
  builtin echo -e  "FG_WHITE:         ${FG_WHITE}FG_WHITE${RESET}"
  builtin echo -e "Background:"
  builtin echo -en "BG_BLACK:      ${BG_BLACK}BG_BLACK${RESET}      "
  builtin echo -e  "BG_GRAY:     ${BG_GRAY}BG_GRAY${RESET}"
  builtin echo -en "BG_RED:        ${BG_RED}BG_RED${RESET}        "
  builtin echo -e  "BG_LRED:     ${BG_LRED}BG_LRED${RESET}"
  builtin echo -en "BG_GREEN:      ${BG_GREEN}BG_GREEN${RESET}      "
  builtin echo -e  "BG_LGREEN:   ${BG_LGREEN}BG_LGREEN${RESET}"
  builtin echo -en "BG_YELLOW:     ${BG_YELLOW}BG_YELLOW${RESET}     "
  builtin echo -e  "BG_LYELLOW : ${BG_LYELLOW}BG_LYELLOW${RESET}"
  builtin echo -en "BG_BLUE:       ${BG_BLUE}BG_BLUE${RESET}       "
  builtin echo -e  "BG_LBLUE:    ${BG_LBLUE}BG_LBLUE${RESET}"
  builtin echo -en "BG_MAGENTA:    ${BG_MAGENTA}BG_MAGENTA${RESET}    "
  builtin echo -e  "BG_LMAGENTA: ${BG_LMAGENTA}BG_LMAGENTA${RESET}"
  builtin echo -en "BG_CYAN:       ${BG_CYAN}BG_CYAN${RESET}       "
  builtin echo -e  "BG_LCYAN:    ${BG_LCYAN}BG_LCYAN${RESET}"
  builtin echo -en "BG_LGRAY: ${BG_LGRAY}BG_LGRAY${RESET} "
  builtin echo -e  "BG_WHITE:         ${BG_WHITE}BG_WHITE${RESET}"
  return $EX_OK
}



###############################################################################
#                               SIGNAL TRAPPING                               #
###############################################################################
# Variables
declare -a traps=(
  ERR
  INT
)
sig_err() { exit; }
sig_int() { exit; }
sig_debug() { return; }


##
# Trap a signal or release it.
# Globals:
#   None
# Arguments:
#   Signal PROGRAM_NAME(case or "SIG"-prefix irrelevant)
#   Callback function(Or "-" to release the signal from the trap)
# Returns:
#   Success/Failure
#
function trap_sig() {
  local -u sig="$1"
  sig="${1/SIG/}"
  if [[ "$2" = "-" ]]; then
    trace "Removing trap of signal 'SIG$sig'."
    if ! trap "-" "$sig"; then
      warn 'Could not release signal.'
      return $EX_ERR
    fi
  else
    local -l callback="sig_$sig"
    callback="${callback/+/_}"
    callback="${callback/-/_}"
    local delegate=$(cat <<EOF
          $2
          if type $callback &> /dev/null; then
            trace "Calling callback function '$callback()'."
            $callback $cb_arg
          else
            error "Callback function '$callback()' not defined."
          fi
EOF
    )
    trace "Trapping 'SIG$sig'. Callback: $callback()."
    if ! builtin trap "$delegate" "$sig"; then
      warn "Could not trap signal 'SIG$sig'."
      return $EX_ERR
    fi
  fi
  return $EX_OK
}

##
# Traps all the signals specified in the traps-array.
# Globals:
#   traps
#   BASH_REMATCH
# Arguments:
#   None
# Returns:
#   Success/Failure
#
function trap_signals() {
  trace 'Trapping signals.'
  local -u sig
  for sig in "${traps[@]}"; do
    trace "Trying to trap 'SIG$sig'."
    case $sig in
      EXIT)
        trap_sig EXIT 'debug "SIGEXIT"'
        ;;
      ERR)
        trap_sig ERR 'errcode=$?; error "SIGERR"; check_retval $errcode'
        ;;
      DEBUG)
        trap_sig DEBUG 'debug "SIGDEBUG"'
        ;;
      RETURN)
        trap_sig RETURN 'debug "SIGRETURN"'
        ;;
      HUP)
        trap_sig HUP 'fatal "SIGHUP"'
        ;;
      INT)
        trap_sig INT 'builtin printf "\033[2D"; debug "SIGINT"'
        ;;
      QUIT)
        trap_sig QUIT 'fatal "SIGQUIT"'
        ;;
      ILL)
        trap_sig ILL 'error "SIGILL"'
        ;;
      TRAP)
        trap_sig TRAP 'debug "SIGTRAP"'
        ;;
      ABRT)
        trap_sig ABRT 'warn "SIGABRT"'
        ;;
      BUS)
        trap_sig BUS 'error "SIGBUS"'
        ;;
      FPE)
        trap_sig FPE 'error "SUGFPE"'
        ;;
      USR1)
        trap_sig USR1 'debug "SIGUSR1"'
        ;;
      USR2)
        trap_sig USR2 'debug "SIGUSR2"'
        ;;
      SEGV)
        trap_sig SEGV 'error "SIGSEGV"'
        ;;
      PIPE)
        trap_sig PIPE 'error "SIGPIPE"'
        ;;
      ALRM|VTALRM|PROF)
        trap_sig ALRM 'debug "SIGALRM/SIGVTALRM/SIGPROF"'
        ;;
      TERM)
        trap_sig TERM 'debug "SIGTERM"'
        ;;
      STKFLT)
        trap_sig STKFLT 'error "SIGSTKFLT"'
        ;;
      CHLD)
        trap_sig CHLD 'debug "SIGCHLD"'
        ;;
      CONT)
        trap_sig CONT 'debug "SIGCONT"'
        ;;
      STOP|TSTP)
        trap_sig STOP 'builtin printf "\033[2D"; debug "SIGSTOP/SIGTSTP"'
        ;;
      TTIN)
        trap_sig TTIN 'debug "SIGTTIN"'
        ;;
      TTOU)
        trap_sig TTOU 'debug "SIGTTOU"'
        ;;
      URG)
        trap_sig URG 'debug "SIGURG"'
        ;;
      XCPU)
        trap_sig XCPU 'fatal "SIGXCPU"'
        ;;
      XFSZ)
        trap_sig XFSZ 'fatal "SIGXFSZ"'
        ;;
      WINCH)
        trap_sig WINCH 'debug "SIGWINCH"'
        ;;
      POLL)
        trap_sig POLL 'debug "SIGPOLL"'
        ;;
      PWR)
        trap_sig PWR 'fatal "SIGPWR"'
        ;;
      SYS)
        trap_sig SYS 'error "SIGSYS"'
        ;;
      RTMIN*)
        local -i num
        if [[ $sig =~ ^RTMIN(\+[1-9]([0-5]|))$ ]]; then
          num=${BASH_REMATCH[1]}
        elif [[ $sig =~ ^RTMIN$ ]]; then
          num=0
        else
          error "Signal 'SIG$sig' unknown. Cannot trap."
          continue
        fi
        trap_sig "$sig" "debug \"SIGRTMIN$num.\""
        ;;
      RTMAX*)
        local -i num
        if [[ $sig =~ ^RTMAX(\-[1-9]([0-4]|))$ ]]; then
          num=${BASH_REMATCH[1]}
        elif [[ $sig =~ ^RTMAX$ ]]; then
          num=0
        else
          error "Signal 'SIG$sig' unknown. Cannot trap."
          continue
        fi
        trap_sig "$sig" "debug \"SIGRTMAX$num.\""
        ;;
      *)
        debug "Signal 'SIG$sig' unknown. Trying to trap anyway."
        trap_sig "$sig" 'trace "Recieved "SIG$sig" signal."'
        ;;
    esac
  done
  return $EX_OK
}



###############################################################################
#                               OPTION PARSING                                #
###############################################################################
# Variables
declare -a opts_var=()
declare -a opts_short=()
declare -a opts_long=()
declare -a opts_arg=()
declare -a opts_help=()
declare -i max_len_long=0
declare -i max_len_arg=0
declare -a args=()
declare PROGRAM_NAME
declare VERSION
declare -i YEAR
declare FULL_NAME
declare -a USAGE
declare EXPLANATION
declare DESCRIPTION

##
# Defines an option to be parsed for and to put into the help page.
# Globals:
#   opts_var
#   opts_short
#   opts_long
#   opts_arg
#   opts_help
#   max_len_long
#   max_len_arg
# Arguments:
#   The variable to set
#   The short command(optional)
#   The long command(optional)
#   The argument of the option(optional)
#   The description of the option
# Returns:
#   None
#
function define_opt() {
  debug "Defining option '$1'. Short: '$2'. Long: '$3'. Argument: '$4'."
  opts_var+=("$1")
  opts_short+=("$2")
  opts_long+=("$3")
  opts_arg+=("$4")
  opts_help+=("$5")
  max_len_long="$((${#3} > max_len_long ? ${#3} : max_len_long))"
  max_len_arg="$((${#4} > max_len_arg ? ${#4} : max_len_arg))"
}

##
# Parses the specified options from the script arguments.
# Globals:
#   BASH_REMATCH
#   opts_var
#   opts_short
#   opts_long
#   opts_arg
#   opts_help
#   args
# Arguments:
#   The script arguments ($@)
# Returns:
#   None
#
function parse_args() {
  # Define helper functions
  function find_matching_opt() {
    trace "Matching '$opt_str' against the defined options."
    for index in "${!opts_short[@]}"; do
      local short="${opts_short[$index]}"
      local long="${opts_long[$index]}"
      # Fix matching of no such option defined:
      [[ -z "$long" ]] && long="#"
      [[ -z "$short" ]] && short="#"
      if [[ $opt_str =~ ^\s*($short|$long)(.*)$ ]]; then
        opt="${BASH_REMATCH[1]}"
        opt_str="${BASH_REMATCH[2]}"
        trace "Found '$opt'. Remaining string: '$opt_str'."
        return $EX_OK
      fi
    done
    trace 'No match found.'
    return $EX_ERR
  }
  function expects_argument() {
    trace "Checking if an argument is expected."
    if [[ -n "${opts_arg[$index]}" ]]; then
      trace "Argument '${opts_arg[$index]}' expected."
      return $EX_OK
    fi
    trace 'No argument expected.'
    return $EX_ERR
  }
  function set_option_variable() {
    trace "Setting argument for '${opts_var[$index]}'."
    local val="$1"
    if [[ -z "$val" ]]; then
      if [[ ! $opt =~ ^\s*(${opts_short[$index]}|${opts_long[$index]})\s*(.*)$ ]]; then
        fatal "Could not match '$opt' with the selected option."
      fi
      val="${BASH_REMATCH[2]}"
    fi
    local var="${opts_var[$index]}"
    debug "Set '$var' to '$val'"
    builtin eval "$var=\"$val\""
    return $EX_OK
  }
  function arg_left_in_opt_str() {
    trace 'Checking if the required argument is in the remaining string.'
    if [[ -z "$opt_str" ]]; then
      trace 'No remaining argument in string.'
      return $EX_ERR
    fi
    trace "Argument determined to be '$opt_str'."
    return $EX_OK
  }

  # Do it
  trace "Parsing options."
  local -a args_old=("$@")
  local opt_str
  local last_opt
  for opt_str in "$@"; do
    trace "Consuming string '$opt_str'."
    if [[ -n "$last_opt" ]]; then
      trace "Deduced to be argument for '$last_opt'."
      opt="$last_opt"
      last_opt=""
      set_option_variable "$opt_str"
      continue
    fi
    local -i index
    local opt=
    local ignore=
    # Does the string start with an option?
    while find_matching_opt; do
      if expects_argument; then
        if arg_left_in_opt_str; then
          set_option_variable "$opt_str"
          ignore=true
          break
        else
          trace "Marking next string to be the argument for the current option."
          last_opt="$opt"
          break
        fi
      else
        # Not an argument but might be another option
        set_option_variable true
        opt_str="-$opt_str"
        ignore=true
      fi
    done
    # No more options in the current opt_str
    if [[ -z "$ignore" ]] && [[ -n "$opt_str" ]]; then
      debug "Adding '$opt_str' to 'args'."
      args+=("$opt_str")
    fi
  done
  trace "Finished parsing options."
  return $EX_OK
}

##
# Prints the VERSION of the script.
# Globals:
#   PROGRAM_NAME
#   EXPLANATION
#   USAGE
#   VERSION
#   DESCRIPTION
#   opts_var
#   opts_short
#   opts_long
#   opts_arg
#   opts_help
#   max_len_long
#   max_len_arg
# Arguments:
#   None
# Returns:
#   None
#
function print_usage() {
  trace 'Printing usage.'
  function pad_right() {
    local -i len=$1
    local str="$2"
    local str="$2"
    builtin printf "%*s" "$((len - ${#str}))" "$pad"
    builtin printf '%s' "$str"
  }
  function pad_left() {
    local -i len=$1
    local str="$2"
    builtin printf '%s' "$str"
    builtin printf "%*.${len}s" "$((len - ${#str}))" "$pad"
  }
  builtin echo "$PROGRAM_NAME -- $VERSION"
  local prefix='Usage:'
  local syn
  for syn in "${USAGE[@]}"; do
    pad_left 7 "$prefix"
    builtin echo "$(/bin/basename $0) $syn"
    prefix=''
  done
  builtin echo "$EXPLANATION"
  builtin echo
  local -i index
  for index in "${!opts_help[@]}"; do
    local short="${opts_short[$index]}"
    local long="${opts_long[$index]}"
    local argument="${opts_arg[$index]}"
    local helptext="${opts_help[$index]}"
    if [[ -n "$short" ]]; then
      if [[ -n "$long" ]]; then
        pad_right 6 "$short, "
      else
        pad_right 6 "$short  "
      fi
    else
      pad_right 6
    fi
    pad_left "$((max_len_long + 1))" "$long"
    pad_left "$((max_len_arg + 2 + ${#ITALIC} + ${#RESET}))" "${ITALIC}$argument${RESET}"
    builtin printf '%s' "$helptext"
    builtin echo
  done
  builtin echo
  builtin echo "$DESCRIPTION"
  return $EX_OK
}

##
# Prints the VERSION of the script.
# Globals:
#   PROGRAM_NAME
#   VERSION
# Arguments:
#   None
# Returns:
#   None
#
function print_version() {
  trace 'Printing version.'
  builtin echo "$PROGRAM_NAME version: $VERSION"
  builtin echo "$LICENCE"
}


###############################################################################
#                                 DATA TYPES                                  #
###############################################################################

##
# Declares a stack on the global scope.
# Globals:
#   ${1}    - The stack
#   ${1}_i  - The index(=size)
# Arguments:
#   The stack variable
# Returns:
#   None
#
function declare_stack() {
  local _stk="$1"
  local _stk_i="${_stk}_i"
  debug "Declaring variable '$_stk' as stack with stack pointer '$_stk_i'."
  declare -ag $_stk
  declare -ig $_stk_i
  builtin eval "$_stk_i=0"
}

##
# Pushes a value to the stack.
# Globals:
#   ${1}    - The stack
#   ${1}_i  - The index(=size)
# Arguments:
#   The stack variable
#   The value to push
# Returns:
#   None
#
function push() {
  local _stk="$1"
  local _stk_i="${_stk}_i"
  builtin eval "$_stk[\$$_stk_i]=\"$2\""
  let "$_stk_i = $_stk_i + 1"
  local _stk_stk
  builtin eval "_stk_stk=\"\${$_stk[*]}\""
  debug "Pushed value '$2' to stack '$_stk': [$_stk_stk]<-"
}

##
# Pops a value from the stack.
# Globals:
#   ${1}    - The stack
#   ${1}_i  - The index(=size)
# Arguments:
#   The stack variable
#   The variable to assign the popped value to
# Returns:
#   $EX_ERR if the stack is empty.
#
function pop() {
  local _stk="$1"
  local _stk_i="${_stk}_i"
  local _val="$2"
  if builtin eval "(( $_stk_i < 1 ))"; then
    debug "Stack '$_stk' is empty."
    return $EX_ERR
  fi
  let "$_stk_i = $_stk_i - 1"
  builtin eval "$_val=\"\${$_stk[\$$_stk_i]}\""
  builtin eval "unset $_stk[\$$_stk_i]"
  local _val_val
  builtin eval "_val_val=\$$_val"
  local _stk_stk
  builtin eval "_stk_stk=\"\${$_stk[*]}\""
  debug "Popped '$_val_val' from stack '$_stk' to variable '$_val': [$_stk_stk]<-"
}

##
# Peeks a value from the stack.
# Globals:
#   ${1}    - The stack
#   ${1}_i  - The index(=size)
# Arguments:
#   The stack variable
#   The variable to assign the peeked value to
# Returns:
#   $EX_ERR if the stack is empty.
#
function peek() {
  local _stk="$1"
  local _stk_i="${_stk}_i"
  local _val="$2"
  if builtin eval "(( $_stk_i < 1 ))"; then
    debug "Stack '$_stk' is empty."
    return $EX_ERR
  fi
  builtin eval "$_val=\"\${$_stk[(( \$$_stk_i - 1 ))]}\""
  local _val_val
  builtin eval "_val_val=\$$_val"
  local _stk_stk
  builtin eval "_stk_stk=\"\${$_stk[*]}\""
  debug "Peeked '$_val_val' from stack '$_stk': [$_stk_stk]<-"
}


##
# Declares a queue on the global scope.
# Globals:
#   ${1}    - The queue
#   ${1}_i  - The index(=size)
# Arguments:
#   The queue variable
# Returns:
#   None
#
function declare_queue() {
  local _que="$1"
  local _que_i="${_que}_i"
  debug "Declaring variable '$_que' as queue with queue pointer '$_que_i'."
  declare -ag $_que
  declare -ig $_que_i
  builtin eval "$_que_i=0"
}

##
# Offers a value to the queue.
# Globals:
#   ${1}    - The queue
#   ${1}_i  - The index(=size)
# Arguments:
#   The queue variable
#   The value to offer
# Returns:
#   None
#
function offer() {
  local _que="$1"
  local _que_i="${_que}_i"
  builtin eval "$_que[\$$_que_i]=\"$2\""
  let "$_que_i = $_que_i + 1"
  local _que_que
  builtin eval "_que_que=\"\${$_que[*]}\""
  debug "Offered variable '$2' to queue '$_que': [$_que_que]"
}

##
# Polls a value from the queue.
# Globals:
#   ${1}    - The queue
#   ${1}_i  - The index(=size)
# Arguments:
#   The queue variable
#   The variable to assign the polled value to
# Returns:
#   $EX_ERR if the queue is empty.
#
function poll() {
  local _que="$1"
  local _que_i="${_que}_i"
  local _val="$2"
  if builtin eval "(( $_que_i < 1 ))"; then
    debug "Queue '$_que' is empty."
    return $EX_ERR
  fi
  builtin eval "$_val=\"\${$_que[0]}\""
  let "$_que_i = $_que_i - 1"
  local index
  for ((index=0;index<$_que_i;index++)); do
    builtin eval "$_que[$index]=\"\${$_que[(( $index + 1 ))]}\""
  done
  builtin eval "unset $_que[\$$_que_i]"
  local _val_val
  builtin eval "_val_val=\$$_val"
  local _que_que
  builtin eval "_que_que=\"\${$_que[*]}\""
  debug "Polled '$_val_val' from queue '$_que': [$_que_que]"
}

##
# Peeks a value from the queue.
# Globals:
#   ${1}    - The queue
# Arguments:
#   The queue variable
#   The variable to assign the polled value to
# Returns:
#   $EX_ERR if the queue is empty.
#
function peeq() {
  local _que="$1"
  local _que_i="${_que}_i"
  local _val="$2"
  if builtin eval "(( $_que_i < 1 ))"; then
    debug "Queue '$_que' is empty."
    return $EX_ERR
  fi
  builtin eval "$_val=\"\${$_que[0]}\""
  local _val_val
  builtin eval "_val_val=\$$_val"
  local _que_que
  builtin eval "_que_que=\"\${$_que[*]}\""
  debug "Peeked '$_val_val' from queue '$_que': [$_que_que]"
}



###############################################################################
#                               OTHER UTILITIES                               #
###############################################################################

##
# Generates a random integer between 2 specified (included)bounds.
# Globals:
#   RANDOM
# Arguments:
#   The lower bound
#   The upper bound
#   The variable to store the result
# Returns:
#   $EX_ERR if the lower bound exceeds the upper bound.
#
function random() {
  local -i from="$1"
  local -i to="$2"
  local _var="$3"
  if (( from > to )); then
    error "'$from' is greater than '$to'."
    return $EX_ERR
  fi
  trace "Generating random number in [$from, $to]."
  local -i offset=$((from - 1))
  local -i mod=$((to - offset))
  builtin eval "$_var=$(((RANDOM % mod) + 1 + offset))"
}

##
# Tries to create a lock file. Exits the program if file already exists.
# Globals:
#   None
# Arguments:
#   name (optional)
# Returns:
#   $EX_ERR if file already exists.
#
function lock() {
  local lockfile="/tmp/$(/bin/basename "$0")$1.lk"
  if [[ -f "$lockfile" ]]; then
    fatal "Lockfile($lockfile) exists!"
    exit $EX_ERR
  else
    touch "$lockfile"
    debug "Locked '$lockfile'."
  fi
}

##
# Deletes a lock file if it exists.
# Globals:
#   None
# Arguments:
#   name (optional)
# Returns:
#   None
#
function unlock() {
  local lockfile="/tmp/$(/bin/basename "$0")$1.lk"
  if [[ -f "$lockfile" ]]; then
    rm "$lockfile"
    debug "Deleted lockfile '$lockfile'"
  fi
}

##
# Extracts a compressed file.
# From https://stackoverflow.com/questions/17420994/bash-regex-match-string
# Globals:
#   None
# Arguments:
#   file name
# Returns:
#   EX_ERR if it could not extract the file.
#
function extract () {
  if [ -f $1 ] ; then
    trace "Trying to extract file '$1'."
    case $1 in
      *.tar.bz2)
        /bin/tar xvjf $1
        ;;
      *.tar.gz)
        /bin/tar xvzf $1
        ;;
      *.bz2)
        /bin/bunzip2 $1
        ;;
      *.rar)
        /bin/rar x $1
        ;;
      *.gz)
        /bin/gunzip $1
        ;;
      *.tar)
        /bin/tar xvf $1
        ;;
      *.tbz2)
        /bin/tar xvjf $1
        ;;
      *.tgz)
        /bin/tar xvzf $1
        ;;
      *.zip)
        /bin/unzip $1
        ;;
      *.Z)
        /bin/uncompress $1
        ;;
      *.7z)
        /bin/7z x $1
        ;;
      *)
        error "Could not identify the file type of '$1'."
        return $EX_ERR
        ;;
    esac
    if check_retval $?; then
      debug "Extracted file successfully."
    else
      error "Could not extract file."
    fi
  else
    error "'$1' is not a valid file."
  fi
}